<UserControl x:Class="Ironwall.Libraries.VMS.UI.Views.Panels.SetupPanels.VmsApiSetupView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Ironwall.Libraries.VMS.UI.Views.Panels.SetupPanels"
			 xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:cal="http://www.caliburnproject.org"
             xmlns:utils="clr-namespace:Ironwall.Libraries.Utils;assembly=Ironwall.Libraries.Utils"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
	<UserControl.Resources>
		<utils:BindingProxy x:Key="ViewModelProxy" Data="{Binding}" />
	</UserControl.Resources>
	<Grid Height="340">
		<Grid.RowDefinitions>
			<RowDefinition Height="50" />
			<RowDefinition Height="1*" />
			<RowDefinition Height="40" />
		</Grid.RowDefinitions>

		<Grid Grid.Row="0"
              Margin="10 10">
			<Grid.RowDefinitions>
				<RowDefinition Height="30" />
			</Grid.RowDefinitions>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="2*" />
				<ColumnDefinition Width="2*" />
				<ColumnDefinition Width="1*" />
				<ColumnDefinition Width="1*" />
				<ColumnDefinition Width="1*" />
				<ColumnDefinition Width="1*" />
				<ColumnDefinition Width="1*" />
			</Grid.ColumnDefinitions>
			<TextBlock Grid.Column="0"
                       Grid.ColumnSpan="2"
                       VerticalAlignment="Center"
                       Foreground="White"
                       FontWeight="Bold"
                       Text="{DynamicResource SurvApi_DataGridTitle}" />

			<!-- Add Button -->
			<Button Grid.Column="3"
                    VerticalAlignment="Center"
                    Style="{StaticResource MaterialDesignFlatAccentButton}"
                    ToolTip="{DynamicResource Add}"
					IsEnabled="{Binding IsButtonEnable}"
                    md:RippleAssist.IsCentered="True">
				<cal:Message.Attach>
					[Event Click] = [Action OnClickInsertButton($source, $eventArgs]
				</cal:Message.Attach>
				<md:PackIcon Width="20"
                             Height="20"
                             Kind="AddBox" />
			</Button>
			<!-- Remove Button -->
			<Button Grid.Column="4"
                    VerticalAlignment="Center"
                    Style="{StaticResource MaterialDesignFlatAccentButton}"
                    ToolTip="{DynamicResource Remove}"
					IsEnabled="{Binding IsButtonEnable}"
                    md:RippleAssist.IsCentered="True">
				<cal:Message.Attach>
					[Event Click] = [Action OnClickDeleteButton($source, $eventArgs]
				</cal:Message.Attach>
				<md:PackIcon Width="20"
                             Height="20"
                             Kind="MinusBox" />
			</Button>
			<!-- Refresh Button -->
			<Button Grid.Column="5"
                    VerticalAlignment="Center"
                    Style="{StaticResource MaterialDesignFlatAccentButton}"
                    ToolTip="{DynamicResource Refresh}"
					IsEnabled="{Binding IsButtonEnable}"
                    md:RippleAssist.IsCentered="True">
				<cal:Message.Attach>
					[Event Click] = [Action OnClickReloadButton($source, $eventArgs)]
				</cal:Message.Attach>
				<Button.Content>
					<Grid>
						<ProgressBar Width="20"
									 Height="20"
									 Visibility="{Binding ReloadButtonEnable, Converter={StaticResource BoolToInverseVisibleConverter}}"
									 Style="{DynamicResource MaterialDesignCircularProgressBar}"
									 IsIndeterminate="True"
									 Value="44" />
						<md:PackIcon Kind="CircleArrows"
									 Width="20" Height="20"
									 Visibility="{Binding ReloadButtonEnable, Converter={StaticResource BooleanToVisibilityConverter}}"
									 ToolTip="{StaticResource Refresh}"/>
					</Grid>
				</Button.Content>

			</Button>
			<!-- Save Button -->
			<Button Grid.Column="6"
                    VerticalAlignment="Center"
                    Style="{StaticResource MaterialDesignFlatAccentButton}"
                    ToolTip="{DynamicResource Save}"
					IsEnabled="{Binding IsButtonEnable}"
                    md:RippleAssist.IsCentered="True">
				<cal:Message.Attach>
					[Event Click] = [Action OnClickSaveButton($source, $eventArgs]
				</cal:Message.Attach>

				<Button.Content>
					<Grid>
						<ProgressBar Width="20"
									 Height="20"
									 Visibility="{Binding SaveButtonEnable, Converter={StaticResource BoolToInverseVisibleConverter}}"
									 Style="{DynamicResource MaterialDesignCircularProgressBar}"
									 IsIndeterminate="True"
									 Value="44" />
						<md:PackIcon Kind="FloppyDisc"
									 Width="20" Height="20"
									 Visibility="{Binding SaveButtonEnable, Converter={StaticResource BooleanToVisibilityConverter}}"
									 ToolTip="{StaticResource Save}"/>
					</Grid>
				</Button.Content>
			</Button>

		</Grid>
		<Grid Height ="300"
			  Grid.Row="1">
			<!-- ProgressBar section -->
			<ProgressBar Width="50"
                        Height="50"
                        Margin="16"
                        IsIndeterminate="True"
                        Value="44">
				<ProgressBar.Style>
					<Style TargetType="ProgressBar" BasedOn="{StaticResource MaterialDesignCircularProgressBar}">
						<!-- Default Value is Collapsed -->
						<Setter Property="Visibility" Value="Collapsed" />
						<Style.Triggers>
							<!-- If IsVisible == false, show ProgressBar -->
							<DataTrigger Binding="{Binding IsVisible}" Value="False">
								<Setter Property="Visibility" Value="Visible" />
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</ProgressBar.Style>
			</ProgressBar>

			<!-- DataGrid section -->
			<DataGrid ItemsSource="{Binding ViewModelProvider}"
					  AlternationCount="{Binding Items.Count, RelativeSource={RelativeSource Self}}"
					  AutoGenerateColumns="False"
					  EnableRowVirtualization="True"
					  CanUserSortColumns="True"
					  CanUserReorderColumns="False"
					  CanUserResizeColumns="True"
					  SelectionMode="Single"
					  SelectionUnit="FullRow"
					  SelectedItem="{Binding SelectedItem, UpdateSourceTrigger=PropertyChanged}"
					  CanUserAddRows="False"
					  ScrollViewer.CanContentScroll="True"
					  ScrollViewer.VerticalScrollBarVisibility="Auto"
					  ScrollViewer.HorizontalScrollBarVisibility="Visible">
				<DataGrid.Style>
					<Style TargetType="DataGrid" BasedOn="{StaticResource MaterialDesignDataGrid}">
						<!-- Default Value is Collapsed -->
						<Setter Property="Visibility" Value="Collapsed"/>
						<Style.Triggers>
							<!-- If IsVisible == true, show DataGrid -->
							<DataTrigger Binding="{Binding IsVisible}" Value="True">
								<Setter Property="Visibility" Value="Visible"/>
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</DataGrid.Style>
				<DataGrid.Columns>
					<DataGridTemplateColumn>
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<CheckBox Style="{StaticResource MaterialDesignCheckBox}"
                              IsChecked="{Binding IsSelected, Mode=TwoWay}">
									<cal:Message.Attach>
										[Event Click] = [Action OnClickCheckBoxItem($source, $eventArgs)];
									</cal:Message.Attach>
								</CheckBox>
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>

						<DataGridTemplateColumn.Header>
							<Border Padding="0 0 0 0"
                        Margin="-2 0 0 0">
								<CheckBox Style="{StaticResource MaterialDesignCheckBox}"
                              IsChecked="{Binding Data.IsAllChecked, Mode=TwoWay, Source={StaticResource ViewModelProxy}}"
                              HorizontalAlignment="Center">
									<cal:Message.Attach>
										[Event Click] = [Action OnClickCheckBoxColumnHeader($source, $eventArgs)];
									</cal:Message.Attach>
								</CheckBox>
							</Border>
						</DataGridTemplateColumn.Header>
					</DataGridTemplateColumn>

					<!-- Id -->
					<DataGridTemplateColumn  Header="Id"
                                 SortMemberPath="Id"
                                 CanUserSort="True">
						<DataGridTemplateColumn.HeaderStyle>
							<Style TargetType="{x:Type DataGridColumnHeader}"
                       BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}">
								<Setter Property="HorizontalAlignment" Value="Center" />
								<Setter Property="VerticalAlignment" Value="Center" />
								<Setter Property="BorderThickness" Value="0"/>
							</Style>
						</DataGridTemplateColumn.HeaderStyle>
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock VerticalAlignment="Center"
                               TextAlignment="Center"
                               Text="{Binding Id, UpdateSourceTrigger=PropertyChanged}"/>
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
					</DataGridTemplateColumn>

					<!-- ApiAddress -->
					<DataGridTextColumn Header="ApiAddress"
                            Binding="{Binding ApiAddress}">
						<DataGridTextColumn.HeaderStyle>
							<Style TargetType="{x:Type DataGridColumnHeader}"
                       BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}">
								<Setter Property="HorizontalAlignment" Value="Center" />
								<Setter Property="VerticalAlignment" Value="Center" />
								<Setter Property="BorderThickness" Value="0"/>
							</Style>
						</DataGridTextColumn.HeaderStyle>
						<DataGridTextColumn.ElementStyle>
							<Style TargetType="{x:Type TextBlock}">
								<Setter Property="HorizontalAlignment"
                            Value="Center" />
								<Setter Property="VerticalAlignment"
                            Value="Center" />
							</Style>
						</DataGridTextColumn.ElementStyle>
					</DataGridTextColumn>

					<!-- ApiPort -->
					<DataGridTextColumn Header="ApiPort"
                            Binding="{Binding ApiPort}">
						<DataGridTextColumn.HeaderStyle>
							<Style TargetType="{x:Type DataGridColumnHeader}"
                       BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}">
								<Setter Property="HorizontalAlignment" Value="Center" />
								<Setter Property="VerticalAlignment" Value="Center" />
								<Setter Property="BorderThickness" Value="0"/>
							</Style>
						</DataGridTextColumn.HeaderStyle>
						<DataGridTextColumn.ElementStyle>
							<Style TargetType="{x:Type TextBlock}">
								<Setter Property="HorizontalAlignment"
                            Value="Center" />
								<Setter Property="VerticalAlignment"
                            Value="Center" />
							</Style>
						</DataGridTextColumn.ElementStyle>
					</DataGridTextColumn>

					<!-- UserName -->
					<DataGridTextColumn Header="Username"
                            Binding="{Binding Username, UpdateSourceTrigger=PropertyChanged}">
						<DataGridTextColumn.HeaderStyle>
							<Style TargetType="{x:Type DataGridColumnHeader}"
                       BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}">
								<Setter Property="HorizontalAlignment" Value="Center" />
								<Setter Property="VerticalAlignment" Value="Center" />
								<Setter Property="BorderThickness" Value="0"/>
							</Style>
						</DataGridTextColumn.HeaderStyle>
						<DataGridTextColumn.ElementStyle>
							<Style TargetType="{x:Type TextBlock}">
								<Setter Property="HorizontalAlignment"
                            Value="Center" />
								<Setter Property="VerticalAlignment"
                            Value="Center" />
							</Style>
						</DataGridTextColumn.ElementStyle>
					</DataGridTextColumn>

					<!-- Password -->
					<DataGridTextColumn Header="Password"
                            Binding="{Binding Password, UpdateSourceTrigger=PropertyChanged}">
						<DataGridTextColumn.HeaderStyle>
							<Style TargetType="{x:Type DataGridColumnHeader}"
                       BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}">
								<Setter Property="HorizontalAlignment" Value="Center" />
								<Setter Property="VerticalAlignment" Value="Center" />
								<Setter Property="BorderThickness" Value="0"/>
							</Style>
						</DataGridTextColumn.HeaderStyle>
						<DataGridTextColumn.ElementStyle>
							<Style TargetType="{x:Type TextBlock}">
								<Setter Property="HorizontalAlignment"
                            Value="Center" />
								<Setter Property="VerticalAlignment"
                            Value="Center" />
							</Style>
						</DataGridTextColumn.ElementStyle>
					</DataGridTextColumn>
				</DataGrid.Columns>
			</DataGrid>
		</Grid>
		
		<StackPanel Grid.Row="2"
                    VerticalAlignment="Center"
                    Margin="10"
                    Orientation="Horizontal">

			<!-- Mulitlingual -->
			<TextBlock Text="{DynamicResource DataGrid_SelectedItem}" />
			<TextBlock Text="{Binding SelectedItemCount, UpdateSourceTrigger=PropertyChanged}" />
		</StackPanel>
	</Grid>
</UserControl>
