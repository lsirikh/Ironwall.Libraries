<UserControl x:Class="Ironwall.Libraries.Map.UI.Views.Symbols.FixedCameraObjectView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Ironwall.Libraries.Map.UI.Views.Symbols"
             xmlns:cal="http://caliburnmicro.com"
			 xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
			 xmlns:units="clr-namespace:Ironwall.Libraries.Map.UI.UI.Units"
             mc:Ignorable="d" 
             d:DesignHeight="100" d:DesignWidth="100">
	<units:CustomControl Canvas.Left="{Binding X, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
						 Canvas.Top="{Binding Y, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
						 Width="{Binding Width, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
						 Height="{Binding Height, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
						 OnEditable="{Binding OnEditable, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
						 IsEditable="{Binding IsEditable, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
						 Visibility="{Binding IsVisible, Mode=TwoWay, Converter={StaticResource BooleanToVisibilityConverter}, UpdateSourceTrigger=PropertyChanged}"
						 cal:Message.Attach="[Event Loaded]=[Action OnLoaded($source, $eventArgs)];
											[Event MouseDown]=[Action OnClickSelect($source, $eventArgs)];"
						 x:Name="FixedCameraObject"
						 Style="{StaticResource CustomItemAdornerStyle}">

		<units:CustomControl.ContextMenu>
			<ContextMenu Opacity="0.89">
				<MenuItem Header="도형편집"
						  Visibility="{Binding OnEditable, Converter={StaticResource BooleanToVisibilityConverter}}"
						  IsEnabled="{Binding IsEditable, Converter={StaticResource InvertBooleanConverter}, UpdateSourceTrigger=PropertyChanged}"
						  DataContext="{Binding }">
					<MenuItem.Icon>
						<md:PackIcon Kind="EditBoxOutline" />
					</MenuItem.Icon>
					<cal:Message.Attach>
						[Event Click] = [Action OnClickEdit($source, $eventArgs)]
					</cal:Message.Attach>
				</MenuItem>
				<MenuItem Header="Exit"
						  Visibility="{Binding OnEditable, Converter={StaticResource BooleanToVisibilityConverter}}"
						  IsEnabled="{Binding IsEditable, UpdateSourceTrigger=PropertyChanged}">
					<MenuItem.Icon>
						<md:PackIcon Kind="EmergencyExit" />
					</MenuItem.Icon>
					<cal:Message.Attach>
						[Event Click] = [Action OnClickExit($source, $eventArgs)]
					</cal:Message.Attach>
				</MenuItem>
				<MenuItem Header="Copy"
						  Visibility="{Binding OnEditable, Converter={StaticResource BooleanToVisibilityConverter}}">
					<MenuItem.Icon>
						<md:PackIcon Kind="ContentCopy" />
					</MenuItem.Icon>
					<cal:Message.Attach>
						[Event Click] = [Action OnClickCopy($source, $eventArgs)]
					</cal:Message.Attach>
				</MenuItem>
				<MenuItem Header="Delete"
						  Visibility="{Binding OnEditable, Converter={StaticResource BooleanToVisibilityConverter}}">
					<MenuItem.Icon>
						<md:PackIcon Kind="Delete" />
					</MenuItem.Icon>
					<cal:Message.Attach>
						[Event Click] = [Action OnClickDelete($source, $eventArgs)]
					</cal:Message.Attach>
				</MenuItem>
				<MenuItem Header="Streaming"
						  >
					<MenuItem.Icon>
						<md:PackIcon Kind="Videocam" />
					</MenuItem.Icon>
					<cal:Message.Attach>
						[Event Click] = [Action OnClickStreaming($source, $eventArgs)]
					</cal:Message.Attach>
				</MenuItem>
			</ContextMenu>
		</units:CustomControl.ContextMenu>

		<Viewbox Width="{Binding Width}"
				 Height="{Binding Height}">
			<Grid>
				<Grid.RowDefinitions>
					<RowDefinition Height="*"/>
					<RowDefinition Height="Auto"/>
				</Grid.RowDefinitions>

				<Grid Grid.Row="0">
					<Rectangle IsHitTestVisible="{Binding IsEditable, Converter={StaticResource InvertBooleanConverter}}"
							   Width="18" Height="18" Fill="#66000000" RadiusX="3" RadiusY="3"/>
					<md:PackIcon Width="20" Height="20"
								 IsHitTestVisible="{Binding IsEditable, Converter={StaticResource InvertBooleanConverter}}"
								 BorderThickness="{Binding ShapeStrokeThick}"
								 VerticalAlignment="Center"
								 HorizontalAlignment="Center"
								 Kind="Cctv">
						<md:PackIcon.RenderTransform>
							<ScaleTransform ScaleX="-1" CenterX="10.1"/>
						</md:PackIcon.RenderTransform>
						<md:PackIcon.Foreground>
							<SolidColorBrush Color="{Binding ShapeFill, Converter={StaticResource StringToColorConverter}}"/>
						</md:PackIcon.Foreground>
						<md:PackIcon.ToolTip>
							<md:Card  Margin="-5" UniformCornerRadius="10">
								<Border BorderBrush="White" BorderThickness="2" Padding="10" CornerRadius="5">
									<TextBlock Text="{Binding NameDevice}" 
											   FontSize="12"
											   Foreground="White"/>
									<Border.Effect>
										<DropShadowEffect
											ShadowDepth="2"
											Direction="270"
											Color="Black"
											Opacity="1"
											BlurRadius="2"/>
									</Border.Effect>
								</Border>
							</md:Card>
						</md:PackIcon.ToolTip>
					</md:PackIcon>

				</Grid>
				<Viewbox Grid.Row="1" x:Name="LableName" Stretch="Fill">
					<TextBlock Margin="5 0"
							   IsHitTestVisible="{Binding IsEditable, Converter={StaticResource InvertBooleanConverter}}"
							   VerticalAlignment="Center"
							   TextAlignment="Center"
							   HorizontalAlignment="Center"
							   FontSize="{Binding FontSize}"
							   Visibility="{Binding IsShowLable, Converter={StaticResource BooleanToVisibilityConverter}}"
							   Text="{Binding Lable, FallbackValue=테스트}">
						<TextBlock.Foreground>
							<SolidColorBrush Color="{Binding FontColor, Converter={StaticResource StringToColorConverter}, UpdateSourceTrigger=PropertyChanged}"/>
						</TextBlock.Foreground>
						<TextBlock.Effect>
							<DropShadowEffect
								ShadowDepth="1"
								Direction="270"
								Color="Black"
								Opacity="1"
								BlurRadius="2"/>
						</TextBlock.Effect>
					</TextBlock>
				</Viewbox>

			</Grid>
		</Viewbox>
		<units:CustomControl.RenderTransform>
			<RotateTransform Angle="{Binding Angle, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
		</units:CustomControl.RenderTransform>
	</units:CustomControl>
</UserControl>