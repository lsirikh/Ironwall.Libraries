<UserControl x:Class="Ironwall.Libraries.Map.UI.Views.Symbols.MultiSensorObjectView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Ironwall.Libraries.Map.UI.Views.Symbols"
             xmlns:cal="http://caliburnmicro.com"
			 xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
			 xmlns:units="clr-namespace:Ironwall.Libraries.Map.UI.UI.Units"
			 xmlns:utils="clr-namespace:Ironwall.Libraries.Utils;assembly=Ironwall.Libraries.Utils"
             mc:Ignorable="d" 
             d:DesignHeight="100" d:DesignWidth="100">
	<UserControl.Resources>
		<utils:BindingProxy x:Key="DataProxy"
                            Data="{Binding}" />
	</UserControl.Resources>
	<units:CustomControl Canvas.Left="{Binding X, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
						 Canvas.Top="{Binding Y, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
						 
						 Width="{Binding Width, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
						 Height="{Binding Height, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
						 OnEditable="{Binding OnEditable, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
						 IsEditable="{Binding IsEditable, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
						 Visibility="{Binding IsVisible, Mode=TwoWay, Converter={StaticResource BooleanToVisibilityConverter}, UpdateSourceTrigger=PropertyChanged}"
						 cal:Message.Attach="[Event Loaded]=[Action OnLoaded($source, $eventArgs)];
											[Event MouseDown]=[Action OnClickSelect($source, $eventArgs)];"
						 x:Name="FenceSymbol"
						 
						 Style="{StaticResource CustomItemAdornerStyle}">

		<units:CustomControl.ContextMenu>
			<ContextMenu Opacity="0.89">
				<MenuItem Header="도형편집"
						  Visibility="{Binding OnEditable, Converter={StaticResource BooleanToVisibilityConverter}}"
						  IsEnabled="{Binding IsEditable, Converter={StaticResource InvertBooleanConverter}, UpdateSourceTrigger=PropertyChanged}"
						  DataContext="{Binding }">
					<MenuItem.Icon>
						<md:PackIcon Kind="EditBoxOutline" />
					</MenuItem.Icon>
					<cal:Message.Attach>
						[Event Click] = [Action OnClickEdit($source, $eventArgs)]
					</cal:Message.Attach>
				</MenuItem>
				<MenuItem Header="Exit"
						  Visibility="{Binding OnEditable, Converter={StaticResource BooleanToVisibilityConverter}}"
						  IsEnabled="{Binding IsEditable, UpdateSourceTrigger=PropertyChanged}">
					<MenuItem.Icon>
						<md:PackIcon Kind="EmergencyExit" />
					</MenuItem.Icon>
					<cal:Message.Attach>
						[Event Click] = [Action OnClickExit($source, $eventArgs)]
					</cal:Message.Attach>
				</MenuItem>
				<MenuItem Header="Copy"
						  Visibility="{Binding OnEditable, Converter={StaticResource BooleanToVisibilityConverter}}">
					<MenuItem.Icon>
						<md:PackIcon Kind="ContentCopy" />
					</MenuItem.Icon>
					<cal:Message.Attach>
						[Event Click] = [Action OnClickCopy($source, $eventArgs)]
					</cal:Message.Attach>
				</MenuItem>
				<MenuItem Header="Delete"
						  Visibility="{Binding OnEditable, Converter={StaticResource BooleanToVisibilityConverter}}">
					<MenuItem.Icon>
						<md:PackIcon Kind="Delete" />
					</MenuItem.Icon>
					<cal:Message.Attach>
						[Event Click] = [Action OnClickDelete($source, $eventArgs)]
					</cal:Message.Attach>
				</MenuItem>
			</ContextMenu>
		</units:CustomControl.ContextMenu>

		<Viewbox Width="{Binding Width, Mode=TwoWay}"
				 Height="{Binding Height, Mode=TwoWay}">
			<Grid>
				<Grid.RowDefinitions>
					<RowDefinition Height="*"/>
					<RowDefinition Height="Auto"/>
				</Grid.RowDefinitions>
				<Grid>
					<Rectangle IsHitTestVisible="{Binding IsEditable, Converter={StaticResource InvertBooleanConverter}}"
								   RadiusX="3" RadiusY="3"
								   Width="18" Height="18"
								   HorizontalAlignment="Center"
								   VerticalAlignment="Center">
						<Rectangle.Style >
							<Style TargetType="Rectangle" >
								<Style.Triggers>
									<DataTrigger Binding="{Binding IsAlarming,  UpdateSourceTrigger=PropertyChanged}" Value="TRUE">
										<Setter Property="Fill">
											<Setter.Value>
												<SolidColorBrush Color="Red"/>
											</Setter.Value>
										</Setter>
									</DataTrigger>
									<DataTrigger Binding="{Binding IsAlarming, UpdateSourceTrigger=PropertyChanged}" Value="FALSE">
										<Setter Property="Fill">
											<Setter.Value>
												<SolidColorBrush Color="#66000000"/>
											</Setter.Value>
										</Setter>
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</Rectangle.Style>
					</Rectangle>
					<md:PackIcon HorizontalAlignment="Center"
									 VerticalAlignment="Center"
									 Width="20" Height="20"
									 IsHitTestVisible="{Binding IsEditable, Converter={StaticResource InvertBooleanConverter}}"
									 BorderThickness="{Binding ShapeStrokeThick}"
									 Kind="SmokeDetector">

						<md:PackIcon.ToolTip>
							<md:Card  Margin="-5" UniformCornerRadius="10">
								<Border BorderBrush="White" BorderThickness="2" Padding="10" CornerRadius="5">
									<TextBlock Text="{Binding NameDevice}" FontSize="12"
													   Foreground="White"/>
									<Border.Effect>
										<DropShadowEffect
											ShadowDepth="2"
											Direction="270"
											Color="Black"
											Opacity="1"
											BlurRadius="2"/>
									</Border.Effect>
								</Border>
							</md:Card>
						</md:PackIcon.ToolTip>
						<md:PackIcon.Style>
							<Style TargetType="md:PackIcon" >
								<Style.Triggers>
									<DataTrigger Binding="{Binding IsFault,  UpdateSourceTrigger=PropertyChanged}" Value="TRUE">
										<Setter Property="Foreground">
											<Setter.Value>
												<SolidColorBrush Color="#88000000"/>
											</Setter.Value>
										</Setter>
									</DataTrigger>
									<DataTrigger Binding="{Binding IsFault, UpdateSourceTrigger=PropertyChanged}" Value="FALSE">
										<Setter Property="Foreground">
											<Setter.Value>
												<SolidColorBrush Color="{Binding Path=Data.ShapeFill, Source={StaticResource DataProxy}, Converter={StaticResource StringToColorConverter}}"/>
											</Setter.Value>
										</Setter>
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</md:PackIcon.Style>
					</md:PackIcon>
				</Grid>
				<Viewbox Grid.Row="1" x:Name="LableName" Stretch="Fill">
					<Border>
						<Border.Style>
							<Style TargetType="Border">
								<Style.Triggers>
									<DataTrigger Binding="{Binding IsAlarming,  UpdateSourceTrigger=PropertyChanged}" Value="TRUE">
										<Setter Property="Background">
											<Setter.Value>
												<SolidColorBrush Color="Red"/>
											</Setter.Value>
										</Setter>
									</DataTrigger>
									<DataTrigger Binding="{Binding IsAlarming, UpdateSourceTrigger=PropertyChanged}" Value="FALSE">
										<Setter Property="Background">
											<Setter.Value>
												<SolidColorBrush Color="Transparent"/>
											</Setter.Value>
										</Setter>
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</Border.Style>

						<TextBlock IsHitTestVisible="{Binding IsEditable, Converter={StaticResource InvertBooleanConverter}}"
								   VerticalAlignment="Center"
								   TextAlignment="Center"
								   HorizontalAlignment="Center"
								   Margin="5 0"
								   FontSize="{Binding FontSize}"
								   Visibility="{Binding IsShowLable, Converter={StaticResource BooleanToVisibilityConverter}}"
								   Text="{Binding Lable, FallbackValue=테스트}">
							<TextBlock.Foreground>
								<SolidColorBrush Color="{Binding FontColor, Converter={StaticResource StringToColorConverter}, UpdateSourceTrigger=PropertyChanged}"/>
							</TextBlock.Foreground>
							<TextBlock.Effect>
								<DropShadowEffect
									ShadowDepth="1"
									Direction="270"
									Color="Black"
									Opacity="1"
									BlurRadius="1"/>
							</TextBlock.Effect>
						</TextBlock>
					</Border>
				</Viewbox>

			</Grid>
		</Viewbox>
		<units:CustomControl.RenderTransform>
			<RotateTransform Angle="{Binding Angle, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
		</units:CustomControl.RenderTransform>
	</units:CustomControl>
</UserControl>

